{"version":3,"sources":["App.js","ColorContainer.js","serviceWorker.js","index.js"],"names":["ColorContainer","value","style","width","height","border","backgroundColor","colorArray","colorR","colorG","colorB","push","initialstate","colorRGB","App","state","this","display","gridTemplateColumns","gridTemplateRows","justifyContent","marginTop","padding","boxSizing","map","uniquecolor","index","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sJAQE,I,wECUaA,EAhBQ,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACrB,OACA,yBACCC,MACI,CACGC,MAAO,MACPC,OAAQ,MACRC,OAAQ,kBACRC,gBAAgB,GAAD,OAAIL,ODJzBM,G,MAAW,IAENC,EAAO,EAAEA,GAAQ,IAAIA,GAAc,EAGvC,IAAK,IAAIC,EAAO,EAAEA,GAAQ,IAAIA,GAAc,EAGpC,IAAK,IAAIC,EAAO,EAAEA,GAAQ,IAAIA,GAAc,EAEpCH,EAAWI,KAAK,OAAOH,EAAO,IAAIC,EAAO,IAAIC,EAAO,KAK3E,IAAME,EAAe,CACnBC,SAAUN,GAuCGO,E,kDAnCb,aAAe,IAAD,8BACZ,gBACKC,MAAQH,EAFD,E,qDASd,IAWOC,EAAYG,KAAKD,MAAjBF,SACL,OAEG,yBAAKX,MAda,CACrBe,QAAS,OACTC,oBAAqB,kBACrBC,iBAAkB,kBAClBC,eAAe,SACfC,UAAW,OACXC,QAAS,OACTC,UAAW,eASPV,EAASW,KAAI,SAACC,EAAYC,GAAb,OACb,kBAAC,EAAD,CAAgBC,IAAKD,EAAOzB,MAAOwB,Y,GA3BzBG,aEbEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.34a712be.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport ColorContainer from './ColorContainer';\n\nimport './App.css';\n\n\nconst colorArray=[];\n \n  for (let colorR=8;colorR<=256;colorR=colorR+8)\n   {\n       \n       for (let colorG=8;colorG<=256;colorG=colorG+8)\n           {\n\n               for (let colorB=8;colorB<=256;colorB=colorB+8)\n                   {\n                       colorArray.push(\"RGB(\"+colorR+\",\"+colorG+\",\"+colorB+\")\")\n                   }\n               }\n   }\n   \nconst initialstate = {\n  colorRGB: colorArray\n   }\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialstate;\n\n}\n\n\nrender() {\n\n  const Stylecomponent = {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(256,3px)\",\n    gridTemplateRows: \"repeat(128,3px)\",\n    justifyContent:\"center\",\n    marginTop: \"50px\",\n    padding: \"10px\",\n    boxSizing: \"border-box\"\n  \n  }\n\n  const {colorRGB} = this.state;\n    return(\n    \n       <div style={Stylecomponent}>\n        {\n        colorRGB.map((uniquecolor,index) => \n        <ColorContainer key={index} value={uniquecolor} />) \n        }\n        </div>\n    )\n\n  }\n\n}\n\nexport default App;\n\n","import React from 'react';\n\nconst ColorContainer = ({value}) => {\n    return( \n    <div \n     style= \n        {{\n            width: \"3px\",\n            height: \"3px\",\n            border: \"1px solid black\",\n            backgroundColor:`${value}`\n        }}\n        >           \n    </div>\n     )\n     \n}\n\nexport default ColorContainer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}